import numpy as np
import cv2
import Transformations as tr

keypoints = np.array([[113, 255], [148, 26], [148, 27], [148, 28], [149, 26], [149, 27], [149, 28], [150, 26], [150, 27], [150, 28], [151, 26], [151, 27], [151, 28], [152, 26], [152, 27], [153, 25], [153, 26], [153, 27], [154, 18], [154, 19], [154, 20], [154, 21], [154, 22], [154, 23], [154, 24], [154, 25], [154, 26], [154, 27], [155, 19], [155, 20], [155, 21], [155, 22], [155, 23], [155, 24], [155, 25], [155, 26], [155, 27], [156, 20], [156, 21], [156, 22], [156, 23], [156, 37], [156, 38], [156, 58], [156, 59], [156, 60], [156, 61], [156, 62], [156, 63], [156, 64], [156, 65], [156, 66], [157, 36], [157, 37], [157, 38], [157, 39], [157, 58], [157, 59], [157, 60], [157, 61], [157, 62], [157, 63], [157, 64], [157, 65], [157, 66], [158, 35], [158, 36], [158, 37], [158, 38], [158, 39], [158, 40], [158, 58], [158, 59], [158, 60], [158, 61], [158, 62], [158, 63], [158, 64], [158, 65], [158, 66], [159, 36], [159, 37], [159, 38], [159, 39], [159, 40], [159, 41], [159, 60], [159, 61], [159, 62], [159, 63], [159, 64], [159, 65], [159, 66], [159, 72], [159, 73], [159, 74], [159, 75], [159, 76], [160, 36], [160, 37], [160, 38], [160, 39], [160, 40], [160, 41], [160, 60], [160, 61], [160, 62], [160, 63], [160, 64], [160, 65], [160, 71], [160, 72], [160, 73], [160, 74], [160, 75], [160, 76], [160, 77], [161, 37], [161, 38], [161, 39], [161, 40], [161, 61], [161, 62], [161, 63], [161, 64], [161, 65], [161, 70], [161, 71], [161, 72], [161, 73], [161, 74], [161, 75], [161, 76], [161, 77], [161, 91], [161, 95], [161, 96], [161, 97], [161, 98], [161, 102], [162, 38], [162, 39], [162, 40], [162, 60], [162, 61], [162, 62], [162, 63], [162, 64], [162, 65], [162, 70], [162, 71], [162, 72], [162, 73], [162, 74], [162, 75], [162, 76], [162, 77], [162, 91], [162, 92], [162, 94], [162, 95], [162, 96], [162, 97], [162, 98], [162, 99], [162, 100], [162, 101], [162, 102], [162, 131], [163, 21], [163, 38], [163, 39], [163, 40], [163, 60], [163, 61], [163, 62], [163, 63], [163, 64], [163, 69], [163, 70], [163, 71], [163, 72], [163, 73], [163, 74], [163, 75], [163, 76], [163, 77], [163, 92], [163, 94], [163, 95], [163, 96], [163, 97], [163, 98], [163, 99], [163, 100], [163, 101], [163, 102], [163, 130], [163, 131], [164, 21], [164, 38], [164, 39], [164, 40], [164, 60], [164, 61], [164, 62], [164, 63], [164, 64], [164, 70], [164, 71], [164, 72], [164, 73], [164, 74], [164, 75], [164, 76], [164, 77], [164, 94], [164, 95], [164, 96], [164, 97], [164, 98], [164, 99], [164, 100], [164, 101], [164, 102], [164, 130], [164, 131], [164, 132], [165, 15], [165, 16], [165, 38], [165, 39], [165, 40], [165, 61], [165, 62], [165, 63], [165, 64], [165, 70], [165, 71], [165, 72], [165, 73], [165, 74], [165, 75], [165, 76], [165, 77], [165, 95], [165, 96], [165, 97], [165, 98], [165, 99], [165, 100], [165, 101], [165, 102], [165, 130], [165, 131], [165, 132], [166, 15], [166, 16], [166, 17], [166, 18], [166, 19], [166, 20], [166, 62], [166, 63], [166, 64], [166, 70], [166, 71], [166, 72], [166, 73], [166, 74], [166, 75], [166, 76], [166, 77], [166, 96], [166, 97], [166, 98], [166, 99], [166, 100], [166, 101], [166, 102], [166, 130], [166, 131], [166, 132], [166, 141], [166, 142], [167, 15], [167, 16], [167, 17], [167, 18], [167, 19], [167, 20], [167, 63], [167, 70], [167, 71], [167, 72], [167, 73], [167, 74], [167, 75], [167, 76], [167, 77], [167, 96], [167, 97], [167, 98], [167, 99], [167, 100], [167, 101], [167, 102], [167, 130], [167, 131], [167, 132], [167, 141], [167, 142], [168, 15], [168, 16], [168, 17], [168, 18], [168, 63], [168, 64], [168, 70], [168, 71], [168, 72], [168, 73], [168, 74], [168, 75], [168, 96], [168, 97], [168, 98], [168, 99], [168, 100], [168, 101], [168, 102],[168, 115], [168, 116], [168, 117], [168, 130], [168, 131], [168, 132], [169, 15], [169, 16], [169, 17], [169, 63], [169, 64], [169, 70], [169, 71], [169, 72], [169, 73], [169, 74], [169, 96], [169, 97], [169, 98], [169, 99], [169, 100], [169, 101], [169, 115], [169, 116], [169, 117], [169, 130], [169, 131], [169, 132], [170, 57], [170, 58], [170, 70], [170, 71], [170, 72], [170, 73], [170, 96], [170, 97], [170, 98], [170, 99], [170, 100], [170, 101], [170, 115], [170, 116], [170, 117], [170, 131], [171, 57], [171, 58], [171, 71], [171, 72], [171, 95], [171, 96], [171, 100], [171, 101], [171, 115], [171, 116], [171, 117], [171, 131], [172, 96], [172, 99], [172, 100], [172, 101], [172, 131], [173, 99], [173, 100], [173, 101], [173, 131], [174, 100], [174, 131], [186, 18], [186, 19], [187, 17], [187, 18], [187, 19], [187, 20], [188, 17], [188, 18], [188, 19], [188, 20], [189, 15], [189, 18], [189, 19], [189, 51], [189, 52], [189, 98], [189, 99], [189, 100], [189, 101], [189, 102], [190, 14], [190, 15], [190, 16], [190, 98], [190, 99], [190, 100], [190, 101], [190, 102], [190, 103], [191, 0], [191, 13], [191, 14], [191, 15], [191, 85], [191, 86], [191, 87], [191, 99], [191, 100], [191, 101], [191, 102], [191, 103], [192, 0], [192, 12], [192, 13], [192, 14], [192, 15], [192, 85], [192, 86], [192, 87], [193, 0], [193, 10], [193, 11], [193, 12], [193, 13], [193, 14], [194, 0], [194, 9], [194, 10], [194, 11], [194, 12], [194, 13], [195, 8], [195, 9], [195, 10], [195, 11], [195, 12], [195, 62], [196, 7], [196, 8], [196, 9], [196, 10], [196, 11], [196, 62], [196, 63], [196, 73], [196, 74], [196, 75], [197, 7], [197, 8], [197, 9], [197, 10], [197, 62], [197, 63], [198, 7], [198, 8], [198, 9], [198, 62], [199, 7], [199, 8], [199, 9], [200, 7], [200, 8], [200, 9], [201, 7], [201, 8], [201, 221], [201, 222], [201, 223], [201, 224], [201, 225], [201, 226], [201, 227], [201, 228], [201, 229], [201, 230], [201, 231], [201, 232], [201, 233], [201, 234], [201, 235], [201, 236], [201, 237], [201, 238], [201, 239], [201, 240], [201, 241], [202, 221], [202, 222], [202, 223], [202, 224], [202, 225], [202, 226], [202, 227], [202, 228], [202, 229], [202, 230], [202, 231], [202, 232], [202, 233], [202, 234], [202, 235], [202, 236], [202, 237], [202, 238], [202, 239], [202, 240], [202, 241], [202, 242], [202, 243], [202, 244], [202, 245], [202, 246], [203, 221], [203, 222], [203, 223], [203, 224], [203, 225], [203, 226], [203, 227], [203, 228], [203, 229], [203, 230], [203, 231], [203, 232], [203, 233], [203, 234], [203, 235], [203, 236], [203, 237], [203, 238], [203, 239], [203, 240], [203, 241], [203, 242], [203, 243], [203, 244], [203, 245], [203, 246], [203, 247], [204, 221], [204, 222], [204, 223], [204, 226], [204, 227], [204, 228], [204, 229], [204, 230], [204, 231], [204, 232], [204, 233], [204, 234], [204, 235], [204, 236], [204, 237], [204, 238], [204, 239], [204, 240], [204, 241], [204, 242], [204, 243], [204, 244], [204, 245], [204, 246], [204, 247], [205, 221], [205, 222], [205, 227], [205, 228], [205, 229], [205, 230], [205, 231], [205, 232], [205, 233], [205, 234], [205, 235], [205, 236], [205, 237], [205, 238], [205, 239], [205, 240], [205, 241], [205, 242], [205, 243], [205, 244], [205, 245], [205, 246], [205, 247], [206, 227], [206, 228], [206, 229], [206, 230], [206, 231], [206, 232], [206, 233], [206, 234], [206, 235], [206, 236], [206, 237], [206, 238], [206, 239], [206, 240], [206, 241], [206, 242], [206, 243], [206, 244], [206, 245], [206, 246], [206, 247], [206, 248], [207, 227], [207, 228], [207, 229], [207, 230], [207, 231], [207, 232], [207, 233], [207, 234], [207, 235], [207, 236], [207, 237], [207, 238], [207, 239], [207, 240], [207, 241], [207, 242], [207, 243], [207, 244], [207, 245], [207, 246], [207, 247], [207, 248], [207, 249], [208, 229], [208, 230], [208, 231], [208, 232], [208, 233], [208, 234], [208, 235], [208, 236], [208, 237], [208, 238], [208, 239], [208, 240], [208, 241], [208, 242], [208, 243], [208, 244], [208, 245], [208, 246], [208, 247], [208, 248], [208, 249], [209, 235], [209, 236], [209, 237], [209, 238], [209, 239], [209, 240], [209, 241], [209, 242], [209, 243], [209, 244], [209, 245], [209, 246], [209, 247], [209, 248], [209, 249], [210, 243], [210, 244], [210, 245], [210, 246], [210, 247], [210, 248], [210, 249]])
transformed_keypoints = np.array([ [ 68,  36], [115, 153], [133,  96], [133,  97], [133,  98], [133,  99], [133, 100], [134, 100], [134, 141], [135,  63], [135,  64], [135,  66], [135,  67], [136,  59], [136,  60], [136,  63], [136,  64], [136,  65], [136,  68], [136, 101], [136, 102], [136, 105], [136, 106], [136, 107], [136, 108], [136, 110], [137,  59], [137,  62], [137,  64], [137,  65], [137,  67], [137,  68], [137,  92], [137,  95], [137,  97], [137,  98], [137, 103], [137, 104], [137, 105], [137, 132], [137, 133], [138,  60], [138,  61], [138,  62], [138,  64], [138,  65], [138,  66], [138,  67], [138,  81], [138,  82], [138,  83], [138,  84], [138,  85], [138,  86], [138,  89], [138,  95], [138,  97], [138,  98], [138,  99], [138, 100], [138, 101], [138, 102], [138, 103], [138, 104], [138, 132], [139,  60], [139,  61], [139,  65], [139,  79], [139, 104], [139, 131], [140,  70], [140,  72], [140,  73], [140, 122], [141,  59], [141,  61], [141,  62], [141,  64], [141,  65], [141,  66], [141,  67], [141,  68], [141,  70], [141,  71], [141,  74], [141,  75], [141,  76], [141,  77], [142,  40], [142,  42], [142,  43], [142,  44], [142,  45], [142,  46], [142,  49], [142,  50], [142,  51], [142,  52], [142,  53], [142,  56], [142,  59], [142,  60], [142,  61], [142,  62], [142,  63], [142,  64], [142,  66], [142,  67], [142,  77], [142,  78], [142,  79], [143,  34], [143,  35], [143,  36], [143,  64], [143,  69], [143,  70], [143,  71], [143,  73], [143,  74], [143,  75], [143,  76], [144,  51], [144,  65], [144,  71], [144,  72], [145,  40], [145, 119], [146, 254], [147,  63], [147,  64], [147,  65], [147,  66], [147,  68], [147,  69], [147,  70], [147,  71], [147,  72], [147, 255], [148,  28], [148,  39], [148,  40], [148,  41], [148,  42], [148,  43], [148,  55], [150, 119], [151, 167], [152, 187], [152, 188], [154, 206], [154, 207], [154, 208], [154, 209], [154, 210], [154, 211], [154, 212], [154, 213], [154, 214], [154, 215], [154, 216], [154, 217], [154, 218], [155, 206], [155, 209], [155, 215], [155, 218], [155, 219], [159, 129], [159, 205], [167, 151], [168, 151], [169, 151], [170, 151], [170, 152], [171, 152], [172, 152], [173, 151], [173, 152], [174, 151], [174, 152], [175, 151], [176, 151], [176, 152], [176, 153], [177, 151], [177, 152], [177, 153], [178, 152], [178, 153], [179, 152], [179, 153], [179, 225], [180, 152], [180, 153], [181, 152], [181, 154], [182, 152], [182, 154], [183,  17], [183, 152], [183, 154], [184, 152], [184, 154], [185, 152], [185, 154], [186, 152], [186, 154], [187, 152], [187, 153], [187, 154], [187, 224], [187, 225], [187, 226], [188, 152], [188, 153], [188, 154], [188, 155], [188, 227], [188, 228], [189, 153], [189, 154], [189, 155], [189, 226], [189, 228], [190, 153], [190, 154], [190, 155], [190, 229], [190, 230], [191, 154], [191, 229], [192, 153], [192, 155], [193, 153], [193, 155], [194, 153], [194, 154], [194, 156], [195, 153], [195, 154], [195, 156], [196, 153], [196, 154], [196, 155], [196, 156], [197, 153], [197, 154], [197, 155], [198, 154], [198, 155], [198, 156], [199, 154], [211, 155], [211, 158], [220, 157], [220, 158], [220, 159], [229,  37], [229,  47], [229,  49], [229,  50], [229,  51], [230, 157], [230, 159], [231, 156], [231, 157], [231, 160], [232, 157], [232, 160], [243, 158], [243, 159], [243, 160], [243, 161], [243, 162], [244, 161], [244, 162], [245, 158], [245, 160], [245, 161], [254,  74], [254,  75], [255,  65], [255,  66], [255,  67], [255,  68], [255,  69], [255,  70] ])

keypoints = tr.rotation(keypoints, 15)
keypoints_cv2 = [cv2.KeyPoint(x=kp[0], y=kp[1], size=1) for kp in keypoints.astype(float)]
transformed_keypoints_cv2 = [cv2.KeyPoint(x=kp[0], y=kp[1], size=1) for kp in transformed_keypoints.astype(float)]

img1 = cv2.imread('../img/originals/24.jpg', cv2.IMREAD_GRAYSCALE)
img2 = cv2.imread('../img/rotation/24.jpg', cv2.IMREAD_GRAYSCALE)

# Verificar que ambas imágenes se hayan cargado
if img1 is None or img2 is None:
    raise ValueError("Una o ambas imágenes no pudieron cargarse. Verifique las rutas de archivo.")

# Crear el detector SURF (ajustar hessianThreshold según sea necesario)
sift = cv2.SIFT_create()

# Detectar y calcular puntos clave y descriptores
kp1, descriptors1 = sift.compute(img1, keypoints_cv2)
kp2, descriptors2 = sift.compute(img2, transformed_keypoints_cv2)

# Configurar el matcher FLANN para comparar descriptores
index_params = dict(algorithm=1, trees=5)
search_params = dict(checks=50)
flann = cv2.FlannBasedMatcher(index_params, search_params)

# Aplicar el matcher FLANN y filtrar las mejores coincidencias
matches = flann.knnMatch(descriptors1, descriptors2, k=2)

# Aplicar el test de razón para eliminar coincidencias pobres
good_matches = [m for m, n in matches if m.distance < 0.85 * n.distance]

# Calcular el porcentaje de coincidencias
total_keypoints = min(len(kp1), len(kp2))
match_percentage = (len(good_matches) / total_keypoints) * 100 if total_keypoints > 0 else 0

print(match_percentage)